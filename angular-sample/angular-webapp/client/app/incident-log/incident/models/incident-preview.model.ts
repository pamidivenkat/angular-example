import { InjuryType, InjuredPart } from './../../../shared/models/lookup.models';
import { IncidentStatus } from './../../../incident-log/models/incident-status.enum';
import { RIDDORReportedMedium } from "./../../../incident-log/incident/models/incident-riddor.model";
import { IncidentDetailsVM } from './../../..//incident-log/incident/models/incident-about-incident';

export class IncidentPreviewVM {
    Id: string;
    CompanyId: string;
    ReferenceNumber: string;
    PreviewDate: Date;
    InjuredPersonName: string;
    InjuredPersonAddressLine1: string;
    InjuredPersonAddressLine2: string;
    InjuredPersonTown: string;
    InjuredPersonPostcode: string;
    InjuredPersonOccupation: string;
    InjuredPersonInjuredPartyName: string;
    IncidentReportedByAddressLine1: string;
    IncidentReportedByAddressLine2: string;
    IncidentReportedByTown: string;
    IncidentReportedByPostcode: string;
    IncidentReportedByCountyName: string;
    AboutIncidentSiteName: string;
    AboutIncidentIncidentType: string;
    AboutIncidentIncidentTypeId: string;
    ReportedToIsRIDDORRequired: boolean;
    ReportedToRIDDORReportedDate?: Date;
    ReportedToMainIndustry: any;
    ReportedToMainActivity: any;
    ReportedToSubActivity: any;
    ReportedToMainFactor: string;
    ReportedToWorkProcess: string;
    ReportedToEffectiveMainIndustry: string;
    ReportedToEffectiveMainActivity: string;
    ReportedToEffectiveSubActivity: string;
    IncidentReportedByUserFullName: string;
    IncidentStatus: IncidentStatus;
    InjuryTypesText: string;
    InjuredPartsText: string;
    InjuredPersonDateOfBirth: string;
    InjuredPersonCounty: string;
    InjuredPersonMobilePhone: string;
    InjuredPersonGender: number;
    InjuredPersonGenderText: string;
    ReportedToReportedBy: string;
    ReportedToLocalAuthority: string;
    ReportedTo: any;
    IsInvestigationRequired: boolean;
    ReportedToRIDDORReportedMedium: string;
    Signature: string;
    AuthorCompanyId: string;
    Comments: string;
    AboutIncidentDetails: IncidentDetailsVM;
    InjuredPersonOtherInjuredParty: string;
    InjuredPersonStartDate: Date;
    NewOrExpectantMother: boolean;
    ReportedToCounty: string;
    ReportedToCountry: string;
    Witnesses: Array<any>;
    DiagnosedDiseaseCategoryName : string;
    InjuredPartyId:string;
    IsInjuredPartyEmployee:boolean;
    constructor() {
        this.Id = null;
        this.ReferenceNumber = null;
        this.PreviewDate = new Date();
        this.InjuredPersonName = null;
        this.InjuredPersonAddressLine1 = null;
        this.InjuredPersonAddressLine2 = null;
        this.InjuredPersonTown = null;
        this.InjuredPersonPostcode = null;
        this.InjuredPersonOccupation = null;
        this.InjuredPersonInjuredPartyName = null;
        this.InjuredPersonDateOfBirth = null;
        this.IncidentReportedByAddressLine1 = null;
        this.IncidentReportedByAddressLine2 = null;
        this.IncidentReportedByTown = null;
        this.IncidentReportedByCountyName = null;
        this.AboutIncidentIncidentType = null;
        this.IncidentReportedByPostcode = null;
        this.AboutIncidentSiteName = null;
        this.ReportedToIsRIDDORRequired = false;
        this.ReportedToRIDDORReportedDate = null;
        this.ReportedToMainIndustry = null;
        this.ReportedToMainActivity = null;
        this.ReportedToSubActivity = null;
        this.ReportedToMainFactor = null;
        this.ReportedToWorkProcess = null;
        this.ReportedToEffectiveMainIndustry = null;
        this.ReportedToEffectiveMainActivity = null;
        this.ReportedToEffectiveSubActivity = null;
        this.IncidentReportedByUserFullName = null;
        this.IncidentStatus = null;
        this.InjuryTypesText = null;
        this.InjuredPartsText = null;
        this.InjuredPersonCounty = null;
        this.InjuredPersonMobilePhone = null;
        this.InjuredPersonGenderText = null;
        this.ReportedToReportedBy = null;
        this.ReportedToLocalAuthority = null;
        this.ReportedTo = null;
        this.IsInvestigationRequired = false;
        this.ReportedToRIDDORReportedMedium = null;
        this.Signature = null;
        this.AuthorCompanyId = null;
        this.Comments = null;
        this.AboutIncidentDetails = new IncidentDetailsVM();
        this.AboutIncidentIncidentTypeId = null;
        this.InjuredPersonOtherInjuredParty = null;
        this.InjuredPersonStartDate = null;
        this.NewOrExpectantMother = false;
        this.ReportedToCounty = null;
        this.ReportedToCountry = null;
        this.Witnesses = null;
        this.DiagnosedDiseaseCategoryName = null;
        this.InjuredPartyId = null;
        this.IsInjuredPartyEmployee = false;
    }
}
